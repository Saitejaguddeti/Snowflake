Create or REPLACE DATABASE cricket;
CREATE Or REPLACE Schema CRICKET.LAND;
CREATE Or REPLACE Schema CRICKET.raw;
CREATE Or REPLACE Schema CRICKET.clean;
CREATE Or REPLACE Schema CRICKET.consumption;

USE SCHEMA CRICKET.LAND;

CREATE OR REPLACE FILE FORMAT CRICKET.LAND.my_jason_format
type = json
null_if =('\\n','null','')
strip_outer_array=true
comment = 'Json file format';

CREATE OR REPLACE STAGE CRICKET.LAND.MY_STG;

LIST @CRICKET.LAND.MY_STG;

SELECT $1:meta::Variant as meta,
$1:info::variant as info,
$1:innings::array as innings,
metadata$filename as file_name,
metadata$file_row_number int,
metadata$file_content_key text,
metadata$file_last_modified stg_modified_ts 
FROM @my_stg/cricket/json
(file_format=> 'my_jason_format');



USE SCHEMA CRICKET.RAW;

CREATE OR REPLACE TRANSIENT TABLE CRICKET.RAW.match_raw_tbl(
meta object not null,
info variant not null,
innings ARRAY NOT null,
stg_file_name text not null,
stg_file_row_number int not null,
stg_file_hashkey text not null,
stg_modified_ts timestamp not null
)
comment = 'This is raw table to store all the json data file with root elements extracted';



COPY INTO CRICKET.RAW.match_raw_tbl 
FROM(
SELECT $1:meta::Variant as meta,
$1:info::variant as info,
$1:innings::array as innings,
metadata$filename as file_name,
metadata$file_row_number int,
metadata$file_content_key text,
metadata$file_last_modified stg_modified_ts 
FROM @cricket.land.my_stg/cricket/json)
file_format = (format_name='CRICKET.LAND.my_jason_format')
ON_ERROR = 'CONTINUE';


SELECt * FROM MATCH_RAW_TBL;


select count(*) FROM MATCH_RAW_TBL;




Use SCHEMA cricket.clean;

select 
    meta:data_version::text as data_version,
    meta:created::date as created,
    meta:revision::number as revision
From
    CRICKET.raw.match_raw_tbl;


//INFO 
SELECT
    info:match_type_number::int as match_type_number,
    info:match_type::text as match_type,
    info:season::text as season,
    info:team_type::text as team_type,
    info:overs::int as overs,
    info:city::text as city,       
    info:venue::text as venue,
FROM CRICKET.raw.match_raw_tbl;


CREATE OR REPLACE TRANSIENT TABLE CRICKET.CLEAN.MATCH_DETAIL_CLEAN AS
select
    info:match_type_number::int as match_type_number, 
    info:event.name::text as event_name,
    case
    when 
        info:event.match_number::text is not null then info:event.match_number::text
    when 
        info:event.stage::text is not null then info:event.stage::text
    else
        'NA'
    end as match_stage,   
    info:dates[0]::date as event_date,
    date_part('year',info:dates[0]::date) as event_year,
    date_part('month',info:dates[0]::date) as event_month,
    date_part('day',info:dates[0]::date) as event_day,
    info:match_type::text as match_type,
    info:season::text as season,
    info:team_type::text as team_type,
    info:overs::text as overs,
    info:city::text as city,
    info:venue::text as venue, 
    info:gender::text as gender,
    info:teams[0]::text as first_team,
    info:teams[1]::text as second_team,
    case 
        when info:outcome.winner is not null then 'Result Declared'
        when info:outcome.result = 'tie' then 'Tie'
        when info:outcome.result = 'no result' then 'No Result'
        else info:outcome.result
    end as matach_result,
    case 
        when info:outcome.winner is not null then info:outcome.winner
        else 'NA'
    end as winner,   

    info:toss.winner::text as toss_winner,
    initcap(info:toss.decision::text) as toss_decision,
    --
    stg_file_name ,
    stg_file_row_number,
    stg_file_hashkey,
    stg_modified_ts
    from 
    cricket.raw.match_raw_tbl;



SELECT * FROM CRICKET.CLEAN.MATCH_DETAIL_CLEAN;


CREATE OR REPLACE TABLE CRICKET.CLEAN.player_clean_table as
SELECT 
    raw.info:match_type_number::int as match_type_number,
    p.key::text as country,
    team.value::text as player,
    stg_file_name ,
    stg_file_row_number,
    stg_file_hashkey,
    stg_modified_ts
FROM cricket.raw.match_raw_tbl raw,
lateral flatten(input => raw.info:players) p,
lateral flatten(input => p.value) team;

ALTER TABLE CRICKET.CLEAN.player_clean_table
modify column match_type_number set not null;

ALTER TABLE CRICKET.CLEAN.player_clean_table
modify column country set not null;

ALTER TABLE CRICKET.CLEAN.player_clean_table
modify column player set not null;


//ADD Primary key 
ALTER TABLE cricket.CLEAN.MATCH_DETAIL_CLEAN
ADD CONSTRAINT pk_match_type_number primary key (match_type_number);

//Add relationship between match and player
ALTER TABLE CRICKET.CLEAN.player_clean_table plr
ADD CONSTRAINT foreign_key_match_id
foreign key (match_type_number)
references cricket.clean.MATCH_DETAIL_CLEAN(match_type_number);



SELECT get_ddl('table', 'CLEAN.MATCH_DETAIL_CLEAN');


select * FROM CLEAN.MATCH_DETAIL_CLEAN mth
join player_clean_table plr
on mth.match_type_number=plr.match_type_number;



//Innings

SELECT 
    mth.info:match_type_number::int as match_type_number,
    mth.innings
From cricket.raw.match_raw_tbl mth;

SELECT 
    mth.info:match_type_number::int as match_type_number,
    i.*
FROM cricket.raw.match_raw_tbl mth,
lateral flatten(input => mth.innings) i
where match_type_number=4674;


SELECT 
    mth.info:match_type_number::int as match_type_number,
    i.value:team::text as team_name,
    o.*,
FROM cricket.raw.match_raw_tbl mth,
lateral flatten(input => mth.innings) i,
lateral flatten(input=> i.value:overs) o
where match_type_number=4674;


SELECT 
    mth.info:match_type_number::int as match_type_number,
    i.value:team::text as team_name,
    o.*,
    d.*
FROM cricket.raw.match_raw_tbl mth,
lateral flatten(input => mth.innings) i,
lateral flatten(input=> i.value:overs) o,
lateral flatten(input => o.value:deliveries) d
where match_type_number=4674;


SELECT 
    mth.info:match_type_number::int as match_type_number,
    i.value:team::text as team_name,
    o.value:over::int as Over,
    d.value:bowler::text as Bowler,
    d.value:batter::text as Batter,
    d.value:non_striker::text as Non_Striker,
    d.value:runs.batter::int as runs,
    d.value:runs.extras::int as Extras,
    d.value:runs.total::int as Total_Runs_per_ball
FROM cricket.raw.match_raw_tbl mth,
lateral flatten(input => mth.innings) i,
lateral flatten(input=> i.value:overs) o,
lateral flatten(input => o.value:deliveries) d
where match_type_number=4674;

SELECT 
    mth.info:match_type_number::int as match_type_number,
    i.value:team::text as team_name,
    o.value:over::int+1 as Over,
    d.value:bowler::text as Bowler,
    d.value:batter::text as Batter,
    d.value:non_striker::text as Non_Striker,
    d.value:runs.batter::int as runs,
    d.value:runs.extras::int as Extras,
    e.key::text as extra_type,
    d.value:runs.total::int as Total_Runs_per_ball,
FROM cricket.raw.match_raw_tbl mth,
lateral flatten(input => mth.innings) i,
lateral flatten(input=> i.value:overs) o,
lateral flatten(input => o.value:deliveries) d,
lateral flatten(input=>d.value:extras, outer=>true) e
where match_type_number=4674;

SELECT 
    mth.info:match_type_number::int as match_type_number,
    i.value:team::text as team_name,
    o.value:over::int+1 as Over,
    d.value:bowler::text as Bowler,
    d.value:batter::text as Batter,
    d.value:non_striker::text as Non_Striker,
    d.value:runs.batter::int as runs,
    d.value:runs.extras::int as Extras,
    e.key::text as extra_type,
    d.value:runs.total::int as Total_Runs_per_ball,
    w.value:player_out::text as player_out,
    w.value:kind::text as player_out_type,
    w.value:fielders::text as player_out_fielders
FROM cricket.raw.match_raw_tbl mth,
lateral flatten(input => mth.innings) i,
lateral flatten(input=> i.value:overs) o,
lateral flatten(input => o.value:deliveries) d,
lateral flatten(input=>d.value:extras, outer=>true) e,
lateral flatten(input=>d.value:wickets, outer=>true) w
where match_type_number=4674;


Create or Replace transient table cricket.clean.delivery_clean_table as
SELECT 
    mth.info:match_type_number::int as match_type_number,
    i.value:team::text as team_name,
    o.value:over::int+1 as Over,
    d.value:bowler::text as Bowler,
    d.value:batter::text as Batter,
    d.value:non_striker::text as Non_Striker,
    d.value:runs.batter::int as runs,
    d.value:runs.extras::int as Extras,
    e.key::text as extra_type,
    d.value:runs.total::int as Total_Runs_per_ball,
    w.value:player_out::text as player_out,
    w.value:kind::text as player_out_type,
    w.value:fielders::text as player_out_fielders
FROM cricket.raw.match_raw_tbl mth,
lateral flatten(input => mth.innings) i,
lateral flatten(input=> i.value:overs) o,
lateral flatten(input => o.value:deliveries) d,
lateral flatten(input=>d.value:extras, outer=>true) e,
lateral flatten(input=>d.value:wickets, outer=>true) w;


SELECT * FROM cricket.clean.delivery_clean_table;


Desc table cricket.clean.delivery_clean_table;


ALTER TABLE cricket.clean.delivery_clean_table
MODIFY COLUMN match_type_number set not null;

ALTER TABLE cricket.clean.delivery_clean_table
MODIFY COLUMN team_name set not null;

ALTER TABLE cricket.clean.delivery_clean_table
MODIFY COLUMN Over set not null;

ALTER TABLE cricket.clean.delivery_clean_table
MODIFY COLUMN bowler set not null;

ALTER TABLE cricket.clean.delivery_clean_table
MODIFY COLUMN batter set not null;

ALTER TABLE cricket.clean.delivery_clean_table
MODIFY COLUMN non_striker set not null;


Alter TABLE CRICKET.clean.delivery_clean_table
ADD CONSTRAINT fk_delivery_match_id
foreign key(match_type_number)
references Cricket.clean.match_detail_clean (match_type_number);


SELECT get_ddl('table','delivery_clean_table');


//Validation

SELECT * FROM CRICKET.CLEAN.MATCH_DETAIL_CLEAN
WHERE match_type_number=4674;


SELECT 
    team_name,
    batter,
    sum(runs) as total_score
FROM
    delivery_clean_table
WHERE MATCH_TYPE_NUMBER=4674
GROUP BY team_name,batter
ORDER BY team_name,total_score DESC;


SELECT 
    team_name,
    sum(runs)+sum(extras) as total
FROM delivery_clean_table
WHERE MATCH_TYPE_NUMBER=4674
GROUP BY team_name
ORDER BY team_name,total DESC;






//Dimension tables
CREATE OR REPLACE SCHEMA CRICKET.CONSUMPTION;
CREATE OR REPLACE TABLE CRICKET.CONSUMPTION.date_dim(
date_id int primary key autoincrement,
full_date date,
day int,
month int,
year int,
quarter int,
dayofweek int,
dayofmonth int,
dayofyear int,
dayofweekname varchar(3),
isweekend boolean
);


CREATE OR REPLACE table CRICKET.CONSUMPTION.referee_dim(
    referee_id int primary key autoincrement,
    refree_name text not null,
    referee_type text not null
);


CREATE OR REPLACE TABLE CRICKET.CONSUMPTION.team_dim(
team_id int primary key autoincrement,
team_name text not null
);


CREATE OR REPLACE TABLE CRICKET.CONSUMPTION.player_dim(
player_id int primary key autoincrement,
team_id int not null,
player_name text not null
);

alter table CRICKET.CONSUMPTION.player_dim
add constraint fk_team_player_id
foreign key (team_id)
references cricket.clean.team_dim(team_id);

CREATE OR REPLACE TABLE CRICKET.CONSUMPTION.venue_dim(
    venue_id int primary key autoincrement,
    venue_name text not null,
    city text not null,
    state text,
    country text,
    continent text,
    end_Name text,
    capacity number,
    pitch text,
    flood_light boolean,
    established_dt date,
    player_area text,
    other_sports text,
    curator text,
    lattitude number(10,6),
    longitude number(10,6)
);

CREATE OR REPLACE TABLE match_type_dim(
    match_type_id int primary key autoincrement,
    match_type text not null
);


//FACT TABLES

CREATE OR REPLACE TABLE match_fact(
    match_id int,
    date_id int not null,
    referee_id int not null,
    team_a_id int not null,
    team_b_id int not null,
    match_type_id int not null,
    venue_id int not null,
    total_overs number(3),
    balls_per_over number(1),
    
    Overs_played_by_team_a number(2),
    balls_played_by_team_a number(3),
    extra_balls_played_by_team_a number(3),
    extra_runs_scored_by_team_a number(3),
    fours_by_team_a number(3),
    sixes_by_team_a number(3),
    total_score_by_team_a number(3),
    wickets_lost_by_team_a number(2),

    Overs_played_by_team_b number(2),
    Balls_played_by_team_b number(3),
    extra_balls_played_by_team_b number(3),
    extra_runs_scored_by_team_b number(3),
    fours_by_team_b number(3),
    sixes_by_team_b number(3),
    total_score_by_team_b number(3),
    wickets_lost_by_team_b number(2),

    toss_winner_team_id int not null,
    toss_decission text not null,
    match_result text not null,
    winner_team_id int not null,

    CONSTRAINT fk_date FOREIGN KEY (date_id) REFERENCES date_dim (date_id),
    CONSTRAINT fk_referee FOREIGN KEY (referee_id) REFERENCES referee_dim (referee_id),
    CONSTRAINT fk_team1 FOREIGN KEY (team_a_id) REFERENCES team_dim (team_id),
    CONSTRAINT fk_team2 FOREIGN KEY (match_type_id) REFERENCES match_type_dim (match_type_id),
    CONSTRAINT fk_venue FOREIGN KEY (venue_id) REFERENCES venue_dim (venue_id),
    CONSTRAINT fk_toss_winner_team FOREIGN KEY (toss_winner_team_id) REFERENCES team_dim (team_id),
    CONSTRAINT fk_winner_team FOREIGN KEY (winner_team_id) REFERENCES team_dim (team_id)   
    
);



//TEAM DIMENSION

SELECT DISTINCT team_name FROM (
SELECT first_team as team_name from cricket.clean.match_detail_clean
UNION ALL 
SELECT second_team as team_name from cricket.clean.match_detail_clean
)


INSERT INTO CRICKET.CONSUMPTION.team_dim(team_name)
SELECT DISTINCT team_name FROM (
SELECT first_team as team_name from cricket.clean.match_detail_clean
UNION ALL 
SELECT second_team as team_name from cricket.clean.match_detail_clean
) ORDER BY team_name;


SELECT * FROM CRICKET.CONSUMPTION.team_dim;


//player dimension

SELECT country,player FROM CRICKET.CLEAN.PLAYER_CLEAN_TABLE
GROUP BY country,player;


SELECT a.country, b.team_id, a.player
FROM
    cricket.clean.player_clean_table a 
JOIN 
    cricket.consumption.team_dim b
ON 
    a.country=b.team_name
GROUP BY
    a.country,
    b.team_id,
    a.player;

//INSERT PLAYER DETAILS

INSERT INTO cricket.consumption.player_dim (team_id,player_name)
SELECT b.team_id, a.player
FROM
    cricket.clean.player_clean_table a 
JOIN 
    cricket.consumption.team_dim b
ON 
    a.country=b.team_name
GROUP BY
    b.team_id,
    a.player;


SELECT * FROM cricket.consumption.player_dim
ORDER BY team_id;


SELECT * FROM CRICKET.CLEAN.MATCH_DETAIL_CLEAN;


SELECT * FROM CRICKET.RAW.MATCH_RAW_TBL;

SELECT 
    info:officials.match_referees[0],    
    info:officials.reserve_umpires[0],
    info:officials.tv_umpires[0],
    info:officials.umpires[0],
    info:officials.umpires[1]
FROM
    CRICKET.RAW.MATCH_RAW_TBL
LIMIT 1;

SELECT 
     raw.info:match_type_number::int as match_type_number, 
     ref.key::text as referee_type,
     ref.value::text as referee_name
FROM    CRICKET.RAW.MATCH_RAW_TBL raw,
    lateral flatten(input=>raw.info:officials) ref
WHERE
    match_type_number=4674;

SELECT 
     raw.info:match_type_number::int as match_type_number, 
     ref.key::text as referee_tyep,
     refer.value::text as referee_name
FROM    CRICKET.RAW.MATCH_RAW_TBL raw,
    lateral flatten(input=>raw.info:officials) ref,
    lateral flatten(input=>ref.value) refer;

INSERT INTO referee_dim (referee_type,refree_name)
SELECT 
     ref.key::text as referee_type,
     refer.value::text as referee_name
FROM    CRICKET.RAW.MATCH_RAW_TBL raw,
    lateral flatten(input=>raw.info:officials) ref,
    lateral flatten(input=>ref.value) refer
group by referee_type, referee_name;

SELECT * FROM referee_dim;

INSERT INTO VENUE_DIM(venue_name,city)
SELECT 
    venue,
    case
        when city is null then 'NA'
        else city
        end as city
FROM cricket.clean.match_detail_clean
group by venue,city;

SELECT * FROM VENUE_DIM;


SELECT * FROM cricket.clean.match_detail_clean;


SELECT match_type from cricket.clean.match_detail_clean
GROUP BY match_type;

INSERT INTO match_type_dim (match_type)
SELECT match_type from cricket.clean.match_detail_clean
GROUP BY match_type;


SELECT * FROM  match_type_dim;

SELECT min(event_date), max(event_date) from cricket.clean.match_detail_clean;
SELECT event_date from cricket.clean.match_detail_clean order by event_date;

CREATE OR REPLACE transient TABLE cricket.consumption.date_range (Date DATE);

INSERT INTO cricket.consumption.date_range VALUES(
'2023-10-12');
INSERT INTO cricket.consumption.date_range VALUES('2023-10-13'),('2023-10-14'),('2023-10-15'),('2023-10-16'),('2023-10-17'),('2023-10-18'),('2023-10-19'),('2023-10-20'),('2023-10-21'),('2023-10-21'),('2023-10-22'),('2023-10-23'),('2023-10-24'),('2023-10-25'),('2023-10-26'),('2023-10-27'),('2023-10-28'),('2023-10-28'),('2023-10-29'),('2023-10-30'),('2023-10-31'),('2023-11-01'),('2023-11-02'),('2023-11-03'),('2023-11-04'),('2023-11-04'),('2023-11-05'),('2023-11-06'),('2023-11-07'),('2023-11-08'),('2023-11-09'),('2023-11-10');

INSERT INTO cricket.consumption.date_dim 
SELECT 
    ROW_NUMBER() OVER (ORDER BY DATE) AS DATE_ID,
    DATE as fullDate,
    EXTRACT(DAY FROM DATE) as DAY,
    EXTRACT(MONTH FROM DATE) as MONTH,
    EXTRACT(YEAR FROM DATE) as YEAR,
    CASE
        WHEN EXTRACT(QUARTER FROM DATE) IN (1,2,3,4) THEN EXTRACT(QUARTER FROM DATE) END as QUARTER,
    DAYOFWEEKISO(DATE) as DAYoFWeek,
    EXTRACT(DAY from Date) as DayOfMonth,
    DAYOFYEAR(DATE) as DayOfYear,
    DAYNAME(DATE) as DayofWeekName,
    CASE
        WHEN DAYNAME(DATE) IN ('Sat','Sun') THEN 1 ELSE 0 END As IsWeekend
FROM CRICKET.CONSUMPTION.date_range;

SELECT * FROM cricket.consumption.date_dim;

SELECT 
    mth.match_type_number as match_type_number,
    dt.full_date as Date,
    0 as referee_id
FROM 
    cricket.clean.match_detail_clean mth
JOIN 
    cricket.consumption.date_dim dt
ON 
    mth.event_date=dt.full_date;

//with TEAM
SELECT
     mth.match_type_number as match_type_number,
     dt.DATE_ID as DateId,
     0 as referee_id,
     ft.team_id,
     st.team_id,
        
FROM 
    cricket.clean.match_detail_clean mth
JOIN 
    cricket.consumption.date_dim dt ON mth.event_date=dt.full_date
JOIN 
    cricket.consumption.team_dim ft ON mth.first_team=ft.team_name
JOIN 
    cricket.consumption.team_dim st ON mth.second_team=st.team_name
GROUP BY match_type_number,ft.team_id,
     st.team_id ,DATEID;

//with Match

INSERT INTO cricket.consumption.match_fact
SELECT
     mth.match_type_number as match_type_number,
     dt.DATE_ID as DateId,
     0 as referee_id,
     ft.team_id as first_team_id,
     st.team_id as second_team_id,
     md.match_type_id as match_type_id,
     vd.venue_id,
     50 as total_overs,
     6 as balls_per_over,
     max(CASE 
        WHEN dct.team_name = mth.first_team THEN dct.over else 0
     END) As Overs_played_by_team_a,
     SUM(CASE 
        WHEN dct.team_name = mth.first_team THEN 1 else 0
     END) As balls_played_by_team_a,
     SUM(CASE 
        WHEN dct.team_name = mth.first_team and dct.extras !=0 THEN 1 else 0
     END) As extra_balls_played_by_team_a,
     SUM(CASE 
        WHEN dct.team_name = mth.first_team THEN dct.extras else 0
     END) As extra_runs_scored_by_team_a,
     SUM(CASE 
        WHEN dct.team_name = mth.first_team and dct.runs=4 THEN 1 else 0
     END) As fours_by_team_a,
     SUM(CASE 
        WHEN dct.team_name = mth.first_team and dct.runs=6 THEN 1 else 0
     END) As sixes_by_team_a,
      SUM(CASE 
        WHEN dct.team_name = mth.first_team  THEN dct.runs else 0
     END) As total_score_by_team_a,
     SUM(CASE 
        WHEN dct.team_name = mth.first_team and dct.player_out is not null  THEN 1 else 0
     END) As wickets_lost_by_team_a ,

     
    max(CASE 
        WHEN dct.team_name = mth.second_team THEN dct.over else 0
     END) As Overs_played_by_team_b ,
      SUM(CASE 
        WHEN dct.team_name = mth.second_team THEN 1 else 0
     END) As balls_played_by_team_b ,
      SUM(CASE 
        WHEN dct.team_name = mth.second_team and dct.extras !=0 THEN 1 else 0
     END) As extra_balls_played_by_team_b,
     SUM(CASE 
        WHEN dct.team_name = mth.second_team THEN dct.extras else 0
     END) As extra_runs_scored_by_team_b,
     SUM(CASE 
        WHEN dct.team_name = mth.second_team and dct.runs=4 THEN 1 else 0
     END) As fours_by_team_b,
     SUM(CASE 
        WHEN dct.team_name = mth.second_team and dct.runs=6 THEN 1 else 0
     END) As sixes_by_team_b,
      SUM(CASE 
        WHEN dct.team_name = mth.second_team  THEN dct.runs else 0
     END) As total_score_by_team_b,
     SUM(CASE 
        WHEN dct.team_name = mth.second_team and dct.player_out is not null  THEN 1 else 0
     END) As wickets_lost_by_team_b,
    tdt.team_id as toss_winner_team_id,
     mth.toss_decision as toss_decision,
     mth.matach_result as matach_result,
     win.team_id as winner_team_id
FROM 
    cricket.clean.match_detail_clean mth
JOIN 
    cricket.consumption.date_dim dt ON mth.event_date=dt.full_date
JOIN 
    cricket.consumption.team_dim ft ON mth.first_team=ft.team_name
JOIN 
    cricket.consumption.team_dim st ON mth.second_team=st.team_name
JOIN 
    cricket.consumption.match_type_dim md on mth.match_type=md.match_type
JOIN 
    cricket.consumption.venue_dim vd on mth.venue = vd.venue_name
JOIN 
    cricket.clean.delivery_clean_table Dct on mth.match_type_number=dct.match_type_number
JOIN 
    cricket.consumption.team_dim tdt on mth.toss_winner = tdt.team_name
JOIN 
    cricket.consumption.team_dim win on mth.winner = win.team_name
GROUP BY 
    mth.match_type_number,
    date_id,
    referee_id,
    first_team_id,
    second_team_id,
    match_type_id,
    venue_id,
    toss_winner_team_id,
    toss_decision,
    matach_result,
    winner_team_id;



CREATE OR REPLACE TABLE delivery_fact(
    match_id INT,
    team_id INT,
    bowler_id INT,
    batter_id INT,
    non_striker_id INT,
    over INT,
    Runs INT,
    extra_runs INT,
    extra_type VARCHAR(255),
    player_out VARCHAR(255),
    player_out_kind VARCHAR(255),

    CONSTRAINT fk_match_id FOREIGN KEY (match_id) REFERENCES match_fact (match_id),
    CONSTRAINT fk_team FOREIGN KEY (team_id) REFERENCES team_dim (team_id),
    CONSTRAINT fk_bowler FOREIGN KEY (bowler_id) REFERENCES player_dim (player_id),
     CONSTRAINT fk_batter FOREIGN KEY (batter_id) REFERENCES player_dim (player_id),
      CONSTRAINT fk_non_striker FOREIGN KEY (non_striker_id) REFERENCES player_dim (player_id)
);


SELECT * FROM cricket.clean.delivery_clean_table;




CREATE OR REPLACE TABLE CRICKET.CONSUMPTION.player_dim(
player_id int primary key autoincrement,
team_id int not null,
player_name text not null
);


INSERT INTO delivery_fact
SELECT 
    del.match_type_number as match_id,
    tem.team_id,
    bow.player_id as bowler_id,
    bat.player_id as batter_id,
    ns.player_id as non_striker_id,
    del.over as over,
    del.runs as runs,
    CASE WHEN del.extras is null THEN 0 else del.extras end as extra_runs,
    CASE WHEN del.extra_type is null then 'None' else del.extra_type END as extra_type,
    CASE WHEN del.player_out is null THEN 'None' else del.player_out END as player_out,
    CASE WHEN del.player_out_type is null THEN 'None' else del.player_out_type END as player_out_type
FROM cricket.clean.delivery_clean_table del
join
    team_dim  tem on del.team_name = tem.team_name
JOIN 
    player_dim bow on del.bowler=bow.player_name
JOIN 
    player_dim bat on del.batter=bat.player_name
JOIN 
    player_dim ns on del.non_striker=ns.player_name;

SELECT * FROM delivery_fact;
